/*
 * Created by David Adams
 * https://codeshack.io/multi-select-dropdown-html-javascript/
 *
 * Released under the MIT license
 * Generated by Copilot
 */

export interface MultiSelectOptions {
  placeholder?: string;
  max?: number | null;
  search?: boolean;
  selectAll?: boolean;
  listAll?: boolean;
  closeListOnItemSelect?: boolean;
  name?: string;
  width?: string;
  height?: string;
  dropdownWidth?: string;
  dropdownHeight?: string;
  data?: Array<{
    value: string;
    text: string;
    selected: boolean;
    html: string | null;
  }>;
  onChange?: (values: string[], text: string, option: HTMLElement) => void;
  onSelect?: (value: string, text: string, option: HTMLElement) => void;
  onUnselect?: (value: string, text: string, option: HTMLElement) => void;
  selectElement?: HTMLElement; // Generated by Copilot
  element?: HTMLElement; // Generated by Copilot
}

export class MultiSelect {
  private _options: MultiSelectOptions;
  private _selectElement: HTMLElement;
  private _element: HTMLElement;
  private _name: string;

  constructor(element: string | HTMLElement, options: MultiSelectOptions = {}) {
    const defaults: MultiSelectOptions = {
      placeholder: "Select item(s)",
      max: null,
      search: true,
      selectAll: true,
      listAll: true,
      closeListOnItemSelect: false,
      name: "",
      width: "",
      height: "",
      dropdownWidth: "",
      dropdownHeight: "",
      data: [],
      onChange: () => {},
      onSelect: () => {},
      onUnselect: () => {},
    };
    this._options = { ...defaults, ...options };
    this._selectElement =
      typeof element === "string"
        ? (document.querySelector(element) as HTMLElement)
        : element;

    for (const prop in this._selectElement.dataset) {
      if (this._options[prop as keyof MultiSelectOptions] !== undefined) {
        const value = this._selectElement.dataset[prop];
        if (value !== undefined) {
          (this._options as any)[prop as keyof MultiSelectOptions] = value;
        }
      }
    }

    this._name =
      this._selectElement.getAttribute("name") ||
      "multi-select-" + Math.floor(Math.random() * 1000000);

    if (!this._options.data!.length) {
      const options = this._selectElement.querySelectorAll("option");
      options.forEach((option) => {
        this._options.data!.push({
          value: option.value,
          text: option.innerHTML || option.value,
          selected: option.selected,
          html: option.getAttribute("data-html"),
        });
      });
    }

    this._element = this._template();
    this._selectElement.replaceWith(this._element);
    this._updateSelected();
    this._eventHandlers();
  }

  private _template(): HTMLElement {
    let optionsHTML = "";
    for (let i = 0; i < this.data.length; i++) {
      optionsHTML += `
        <div class="multi-select-option${this.selectedValues.includes(this.data[i].value) ? " multi-select-selected" : ""}" data-value="${this.data[i].value}">
          <span class="multi-select-option-radio"></span>
          <span class="multi-select-option-text">${this.data[i].html ? this.data[i].html : this.data[i].text}</span>
        </div>
      `;
    }

    let selectAllHTML = "";
    if (this._options.selectAll) {
      selectAllHTML = `<div class="multi-select-all">
        <span class="multi-select-option-radio"></span>
        <span class="multi-select-option-text">Select all</span>
      </div>`;
    }

    const template = `
      <div class="multi-select ${this._name}"${this._selectElement.id ? ' id="' + this._selectElement.id + '"' : ""} style="${this.width ? "width:" + this.width + ";" : ""}${this.height ? "height:" + this.height + ";" : ""}">
        ${this.selectedValues.map((value) => `<input type="hidden" name="${this._name}[]" value="${value}">`).join("")}
        <div class="multi-select-header" style="${this.width ? "width:" + this.width + ";" : ""}${this.height ? "height:" + this.height + ";" : ""}">
          <span class="multi-select-header-max">${this._options.max ? this.selectedValues.length + "/" + this._options.max : ""}</span>
          <span class="multi-select-header-placeholder">${this.placeholder}</span>
        </div>
        <div class="multi-select-options" style="${this._options.dropdownWidth ? "width:" + this._options.dropdownWidth + ";" : ""}${this._options.dropdownHeight ? "height:" + this._options.dropdownHeight + ";" : ""}">
          ${this._options.search ? '<input type="text" class="multi-select-search" placeholder="Search...">' : ""}
          ${selectAllHTML}
          ${optionsHTML}
        </div>
      </div>
    `;

    const element = document.createElement("div");
    element.innerHTML = template;
    return element;
  }

  private _eventHandlers(): void {
    const headerElement = this._element.querySelector(
      ".multi-select-header",
    ) as HTMLElement;

    this._element.querySelectorAll(".multi-select-option").forEach((option) => {
      option.addEventListener("click", () => {
        let selected = true;
        const optionText = option.querySelector(
          ".multi-select-option-text",
        )!.innerHTML;
        const optionData = option.getAttribute("data-value");
        if (!option.classList.contains("multi-select-selected")) {
          if (
            this._options.max &&
            this.selectedValues.length >= this._options.max
          ) {
            return;
          }

          option.classList.add("multi-select-selected");
          if (this._options.listAll) {
            if (this._element.querySelector(".multi-select-header-option")) {
              const opt = Array.from(
                this._element.querySelectorAll(".multi-select-header-option"),
              ).pop() as HTMLElement;
              opt.insertAdjacentHTML(
                "afterend",
                `<span class="multi-select-header-option" data-value="${optionData}"></span>`,
              );
            } else {
              headerElement.insertAdjacentHTML(
                "afterbegin",
                `<span class="multi-select-header-option" data-value="${optionData}">${optionText}</span>`,
              );
            }
          }
          this._element.insertAdjacentHTML(
            "afterbegin",
            `<input type="hidden" name="${this._name}[]" value="${optionData}">`,
          );
          this.data.find((data) => data.value == optionData)!.selected = true;
        } else {
          option.classList.remove("multi-select-selected");
          this._element
            .querySelectorAll(".multi-select-header-option")
            .forEach((headerOption) => {
              if (headerOption.getAttribute("data-value") == optionData) {
                headerOption.remove();
              }
            });
          this._element.querySelector(`input[value="${optionData}"]`)!.remove();
          this.data.find((data) => data.value == optionData)!.selected = false;
          selected = false;
        }

        if (!this._element.querySelector(".multi-select-header-option")) {
          //headerElement.insertAdjacentHTML('afterbegin', `<span class="multi-select-header-placeholder">${this.placeholder}</span>`);
        }
        if (this._element.querySelector(".multi-select-header-placeholder")) {
          this._element
            .querySelector(".multi-select-header-placeholder")!
            .remove();
        }
        for (const e of headerElement.querySelectorAll(
          ".multi-select-header-option",
        )) {
          e.remove();
        }
        if (this.selectedValues.length > 0) {
          this.selectedValues.forEach((value) => {
            const text = this.data.find((data) => data.value == value)!.text;
            headerElement.insertAdjacentHTML(
              "afterbegin",
              `<span class="multi-select-header-option" data-value="${value}">${text}</span>`,
            );
          });
        } else {
          headerElement.insertAdjacentHTML(
            "afterbegin",
            `<span class="multi-select-header-placeholder">${this.placeholder}</span>`,
          );
        }

        if (this._options.max) {
          this._element.querySelector(".multi-select-header-max")!.innerHTML =
            this.selectedValues.length + "/" + this._options.max;
        }

        if (this._options.search) {
          (
            this._element.querySelector(
              ".multi-select-search",
            ) as HTMLInputElement
          ).value = "";
        }

        this._element
          .querySelectorAll(".multi-select-option")
          .forEach((option) => option.setAttribute("style", "display: flex;"));

        if (this._options.closeListOnItemSelect) {
          headerElement.classList.remove("multi-select-header-active");
        }

        this._options.onChange!(
          this.selectedValues,
          optionText,
          option as HTMLElement,
        );

        if (selected) {
          this._options.onSelect!(
            optionData!,
            optionText,
            option as HTMLElement,
          );
        } else {
          this._options.onUnselect!(
            optionData!,
            optionText,
            option as HTMLElement,
          );
        }
      });
    });

    headerElement.addEventListener("click", () =>
      headerElement.classList.toggle("multi-select-header-active"),
    );

    if (this._options.search) {
      const search = this._element.querySelector(
        ".multi-select-search",
      ) as HTMLInputElement;
      search.addEventListener("input", () => {
        this._element
          .querySelectorAll(".multi-select-option")
          .forEach((option) => {
            option.setAttribute(
              "style",
              option
                .querySelector(".multi-select-option-text")!
                .innerHTML.toLowerCase()
                .includes(search.value.toLowerCase())
                ? "display: flex;"
                : "display: none;",
            );
          });
      });
    }

    if (this._options.selectAll) {
      const selectAllButton = this._element.querySelector(
        ".multi-select-all",
      ) as HTMLElement;
      selectAllButton.addEventListener("click", () => {
        const allSelected = selectAllButton.classList.contains(
          "multi-select-selected",
        );
        this._element
          .querySelectorAll(".multi-select-option")
          .forEach((option) => {
            const dataItem = this.data.find(
              (data) => data.value == option.getAttribute("data-value"),
            );
            if (
              dataItem &&
              ((allSelected && dataItem.selected) ||
                (!allSelected && !dataItem.selected))
            ) {
              (option as HTMLElement).click();
            }
          });
        selectAllButton.classList.toggle("multi-select-selected");
      });
    }

    if (
      this._selectElement.id &&
      document.querySelector(`label[for="${this._selectElement.id}"]`)
    ) {
      document
        .querySelector(`label[for="${this._selectElement.id}"]`)!
        .addEventListener("click", () => {
          headerElement.classList.toggle("multi-select-header-active");
        });
    }

    document.addEventListener("click", (event) => {
      if (
        !(event.target as Element).closest(`.${this._name}`) &&
        !(event.target as Element).closest(
          `label[for="${this._selectElement.id}"]`,
        )
      ) {
        headerElement.classList.remove("multi-select-header-active");
      }
    });
  }

  private _updateSelected(): void {
    if (this._options.listAll) {
      this._element
        .querySelectorAll(".multi-select-option")
        .forEach((option) => {
          if (option.classList.contains("multi-select-selected")) {
            this._element
              .querySelector(".multi-select-header")!
              .insertAdjacentHTML(
                "afterbegin",
                `<span class="multi-select-header-option" data-value="${option.getAttribute("data-value")}">${option.querySelector(".multi-select-option-text")!.innerHTML}</span>`,
              );
          }
        });
    } else {
      if (this.selectedValues.length > 0) {
        this._element
          .querySelector(".multi-select-header")!
          .insertAdjacentHTML(
            "afterbegin",
            `<span class="multi-select-header-option">${this.selectedValues.length} selected</span>`,
          );
      }
    }

    if (this._element.querySelector(".multi-select-header-option")) {
      this._element.querySelector(".multi-select-header-placeholder")!.remove();
    }
  }

  get selectedValues(): string[] {
    return this.data.filter((data) => data.selected).map((data) => data.value);
  }

  get selectedItems(): Array<{
    value: string;
    text: string;
    selected: boolean;
    html: string | null;
  }> {
    return this.data.filter((data) => data.selected);
  }

  set data(
    value: Array<{
      value: string;
      text: string;
      selected: boolean;
      html: string | null;
    }>,
  ) {
    this._options.data = value;
  }

  get data(): Array<{
    value: string;
    text: string;
    selected: boolean;
    html: string | null;
  }> {
    return this._options.data!;
  }

  set selectElement(value: HTMLElement) {
    this._options.selectElement = value;
  }

  get selectElement(): HTMLElement {
    return this._options.selectElement!;
  }

  set element(value: HTMLElement) {
    this._options.element = value;
  }

  get element(): HTMLElement {
    return this._options.element!;
  }

  set placeholder(value: string) {
    this._options.placeholder = value;
  }

  get placeholder(): string {
    return this._options.placeholder!;
  }

  set name(value: string) {
    this._options.name = value;
  }

  get name(): string {
    return this._options.name!;
  }

  set width(value: string) {
    this._options.width = value;
  }

  get width(): string {
    return this._options.width!;
  }

  set height(value: string) {
    this._options.height = value;
  }

  get height(): string {
    return this._options.height!;
  }
}

document
  .querySelectorAll("[data-multi-select]")
  .forEach((select) => new MultiSelect(select as HTMLElement));
